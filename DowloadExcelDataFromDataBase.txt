To enable multiple downloads of Excel data from a MySQL database using PHP and HTML, you can create a script that dynamically generates Excel files for each dataset and allows users to download them. Below is an example implementation:



1. HTML Interface
Create a simple HTML form to trigger the downloads.

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Download Excel Files</title>
</head>
<body>
    <h1>Download Multiple Excel Files</h1>
    <form action="download.php" method="post">
        <button type="submit" name="download">Download All Excel Files</button>
    </form>
</body>
</html>





2. PHP Script (download.php)
This script connects to the MySQL database, fetches data, and generates multiple Excel files for download.








<?php
if (isset($_POST['download'])) {
    // Database connection
    $host = 'localhost';
    $user = 'root';
    $password = '';
    $database = 'your_database';
    $conn = new mysqli($host, $user, $password, $database);

    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }

    // Define datasets to export
    $tables = ['table1', 'table2', 'table3']; // Replace with your table names

    // Create a ZIP file to store all Excel files
    $zip = new ZipArchive();
    $zipFileName = 'excel_files.zip';
    if ($zip->open($zipFileName, ZipArchive::CREATE) !== TRUE) {
        die("Could not create ZIP file.");
    }

    foreach ($tables as $table) {
        // Fetch data from each table
        $result = $conn->query("SELECT * FROM $table");
        if ($result->num_rows > 0) {
            $fileName = "$table.xlsx";
            $fileContent = "ID,Name,Email\n"; // Adjust columns as per your table structure

            while ($row = $result->fetch_assoc()) {
                $fileContent .= "{$row['id']},{$row['name']},{$row['email']}\n"; // Adjust fields
            }

            // Add the file to the ZIP archive
            $zip->addFromString($fileName, $fileContent);
        }
    }

    $zip->close();
    $conn->close();

    // Force download of the ZIP file
    header('Content-Type: application/zip');
    header('Content-Disposition: attachment; filename="' . $zipFileName . '"');
    header('Content-Length: ' . filesize($zipFileName));
    readfile($zipFileName);

    // Clean up
    unlink($zipFileName);
    exit;
}
?>







The HTML form submits a POST request to download.php.
The PHP script connects to the MySQL database and retrieves data from specified tables.
For each table, it generates a CSV-like content and adds it to a ZIP archive.
The ZIP file is sent to the browser for download, and temporary files are cleaned up.
Notes
Replace your_database, table1, table2, etc., with your actual database and table names.
Adjust the column names (id, name, email) in the script to match your database schema.
Ensure the PHP ZipArchive extension is enabled on your server.
This approach is efficient for downloading multiple datasets in one go!
